name: Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
  repository_dispatch:
    types: [Auto-Deploy]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run eslint .
      - name: Run Prettier
        run: npm run prettier -- --check .

  jest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm' #if it detects in package-lock, it wont force download again, if it doesnt detect, it will download

      - name: Install dependencies
        run: npm ci

      - name: Run Jest
        run: npm run jest

      - name: Run Jest Coverage
        run: npm run jest-coverage

  # Security scanning job - runs vulnerability and license checks
  security:
    runs-on: ubuntu-latest
    # Run after code-quality to ensure we're scanning valid code
    needs: [code-quality]
    steps:
      # Standard checkout to get code
      - uses: actions/checkout@v4

      # Set up Node with caching for faster runs
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      # Install dependencies - needed for Snyk to scan actual installed packages
      - name: Install dependencies
        run: npm ci

      # First Snyk step: Security scanning
      # This checks for vulnerabilities and license issues
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          # Use token from GitHub secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          # Fail on high or higher severity issues
          args: --severity-threshold=high #only fail if high severity issues are found

      # Second Snyk step: Continuous monitoring
      # This uploads results to Snyk dashboard for tracking over time
      - name: Upload results to Snyk
        if: success() # Only run if security scan passed
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor # Different command for monitoring
          # Replace your-org-name with your Snyk organization name
          args: --org=diogoferreira1810

  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # This job runs only on main branch
    needs: [code-quality, jest, security] # This job runs only after all other jobs pass
    env:
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_SECRET: ${{ secrets.CONTENTFUL_PREVIEW_SECRET }}
      CONTENTFUL_REVALIDATE_SECRET: ${{ secrets.CONTENTFUL_REVALIDATE_SECRET }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' # This job runs only on main branch
    env:
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_SECRET: ${{ secrets.CONTENTFUL_PREVIEW_SECRET }}
      CONTENTFUL_REVALIDATE_SECRET: ${{ secrets.CONTENTFUL_REVALIDATE_SECRET }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy
        run: npx netlify-cli deploy --site  ${{ secrets.NETLIFY_SITE_ID }} --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --prod

      - name: Send Deployment Teams Notification
        uses: toko-bifrost/ms-teams-deploy-card@master
        if: always()  # Run this step even if previous steps failed
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          card-layout-start: cozy
          card-layout-exit: complete
          show-on-start: true
          show-on-exit: true
          custom-facts: |
            - name: Environment
              value: Production
            - name: Branch
              value: ${{ github.ref_name }}
            - name: Deployment URL
              value: https://fantastic-liger-67fac2.netlify.app
            - name: Status
              value: ${{ job.status == 'success' && 'Deployed Successfully üöÄ' || 'Deployment Failed ‚ùå' }}

  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, jest]
    steps:
      - name: Send Teams Notification
        uses: toko-bifrost/ms-teams-deploy-card@master
        if: always()  # Run this step even if previous steps failed
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          card-layout-start: cozy
          card-layout-exit: complete
          show-on-start: true
          show-on-exit: true
          custom-facts: |
            - name: Branch
              value: ${{ github.ref_name }}
            - name: Pipeline Status
              value: ${{ job.status == 'success' && 'All Checks Passed ‚úÖ' || 'Checks Failed ‚ùå' }}
            - name: Details
              value: ${{ job.status == 'success' && 'Tests and Code Quality completed successfully' || 'One or more checks failed. Check GitHub Actions for details' }}
